// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.0.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CodeInterview.WeatherDress.Core.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class WeatherDressingFeature : Xunit.IClassFixture<WeatherDressingFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "WeatherDressup.feature"
#line hidden
        
        public WeatherDressingFeature(WeatherDressingFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Weather Dressing", "\tIn order to get ready for a trip\r\n\tAs a Traveller\r\n\tI want to dress appropriatel" +
                    "y for the given weather.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Dress accordingly For Hot Weather")]
        [Xunit.TraitAttribute("FeatureTitle", "Weather Dressing")]
        [Xunit.TraitAttribute("Description", "Dress accordingly For Hot Weather")]
        [Xunit.TraitAttribute("Category", "integration")]
        public virtual void DressAccordinglyForHotWeather()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Dress accordingly For Hot Weather", new string[] {
                        "integration"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("the weather is \"HOT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Dress"});
            table1.AddRow(new string[] {
                        "Pajamas_Off"});
            table1.AddRow(new string[] {
                        "PantsOn"});
            table1.AddRow(new string[] {
                        "ShirtOn"});
            table1.AddRow(new string[] {
                        "HeadwearOn"});
            table1.AddRow(new string[] {
                        "FootwearOn"});
            table1.AddRow(new string[] {
                        "LeaveHouse"});
#line 9
 testRunner.When("I wear the following in the given order", ((string)(null)), table1, "When ");
#line 17
 testRunner.Then("I can leave house", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 18
  testRunner.But("shirt I put on should be \"shirt\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "But ");
#line 19
  testRunner.And("pants I put on should be \"shorts\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 20
  testRunner.And("headwear should be \"sun visor\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 21
  testRunner.And("footweear should be \"sandals\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Dress accordingly For Cold Weather")]
        [Xunit.TraitAttribute("FeatureTitle", "Weather Dressing")]
        [Xunit.TraitAttribute("Description", "Dress accordingly For Cold Weather")]
        [Xunit.TraitAttribute("Category", "integration")]
        public virtual void DressAccordinglyForColdWeather()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Dress accordingly For Cold Weather", new string[] {
                        "integration"});
#line 24
this.ScenarioSetup(scenarioInfo);
#line 25
 testRunner.Given("the weather is \"COLD\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Dress"});
            table2.AddRow(new string[] {
                        "Pajamas_Off"});
            table2.AddRow(new string[] {
                        "PantsOn"});
            table2.AddRow(new string[] {
                        "SocksOn"});
            table2.AddRow(new string[] {
                        "ShirtOn"});
            table2.AddRow(new string[] {
                        "HeadwearOn"});
            table2.AddRow(new string[] {
                        "JacketOn"});
            table2.AddRow(new string[] {
                        "FootwearOn"});
            table2.AddRow(new string[] {
                        "LeaveHouse"});
#line 26
 testRunner.When("I wear the following in the given order", ((string)(null)), table2, "When ");
#line 36
 testRunner.Then("I can leave house", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 37
  testRunner.But("shirt I put on should be \"t-shirt\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "But ");
#line 38
  testRunner.And("pants I put on should be \"pants\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 39
  testRunner.And("headwear should be \"hat\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 40
  testRunner.And("footweear should be \"boots\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 41
  testRunner.And("should put on Jacket", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 42
  testRunner.And("should put on Socks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Duplicate DressOn is invalid.", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Weather Dressing")]
        [Xunit.TraitAttribute("Description", "Duplicate DressOn is invalid.")]
        [Xunit.TraitAttribute("Category", "integration")]
        public virtual void DuplicateDressOnIsInvalid_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Duplicate DressOn is invalid.", new string[] {
                        "integration",
                        "ignore"});
#line 46
this.ScenarioSetup(scenarioInfo);
#line 47
 testRunner.Given("the weather is \"HOT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Dress"});
            table3.AddRow(new string[] {
                        "Pajamas_Off"});
            table3.AddRow(new string[] {
                        "PantsOn"});
            table3.AddRow(new string[] {
                        "PantsOn"});
#line 48
 testRunner.When("I wear the following in the given order", ((string)(null)), table3, "When ");
#line 53
 testRunner.Then("the dressing should fail", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Dress with Socks in Hot Weather is invalid.")]
        [Xunit.TraitAttribute("FeatureTitle", "Weather Dressing")]
        [Xunit.TraitAttribute("Description", "Dress with Socks in Hot Weather is invalid.")]
        [Xunit.TraitAttribute("Category", "integration")]
        public virtual void DressWithSocksInHotWeatherIsInvalid_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Dress with Socks in Hot Weather is invalid.", new string[] {
                        "integration"});
#line 56
this.ScenarioSetup(scenarioInfo);
#line 57
 testRunner.Given("the weather is \"HOT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Dress"});
            table4.AddRow(new string[] {
                        "Pajamas_Off"});
            table4.AddRow(new string[] {
                        "PantsOn"});
            table4.AddRow(new string[] {
                        "SocksOn"});
#line 58
 testRunner.When("I wear the following in the given order", ((string)(null)), table4, "When ");
#line 63
 testRunner.Then("pants I put on should be \"shorts\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 64
  testRunner.But("the dressing should fail", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "But ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Dress with Jacket in Hot Weather is invalid.")]
        [Xunit.TraitAttribute("FeatureTitle", "Weather Dressing")]
        [Xunit.TraitAttribute("Description", "Dress with Jacket in Hot Weather is invalid.")]
        [Xunit.TraitAttribute("Category", "integration")]
        public virtual void DressWithJacketInHotWeatherIsInvalid_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Dress with Jacket in Hot Weather is invalid.", new string[] {
                        "integration"});
#line 67
this.ScenarioSetup(scenarioInfo);
#line 68
 testRunner.Given("the weather is \"HOT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Dress"});
            table5.AddRow(new string[] {
                        "Pajamas_Off"});
            table5.AddRow(new string[] {
                        "PantsOn"});
            table5.AddRow(new string[] {
                        "ShirtOn"});
            table5.AddRow(new string[] {
                        "HeadwearOn"});
            table5.AddRow(new string[] {
                        "JacketOn"});
            table5.AddRow(new string[] {
                        "FootwearOn"});
            table5.AddRow(new string[] {
                        "LeaveHouse"});
#line 69
 testRunner.When("I wear the following in the given order", ((string)(null)), table5, "When ");
#line 78
 testRunner.Then("pants I put on should be \"shorts\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 79
  testRunner.And("shirt I put on should be \"shirt\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 80
  testRunner.And("headwear should be \"sun visor\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 81
  testRunner.But("the dressing should fail", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "But ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="No Complete Dressing (miss to wear atleast one dressing) is invalid.", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Weather Dressing")]
        [Xunit.TraitAttribute("Description", "No Complete Dressing (miss to wear atleast one dressing) is invalid.")]
        [Xunit.TraitAttribute("Category", "integration")]
        public virtual void NoCompleteDressingMissToWearAtleastOneDressingIsInvalid_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("No Complete Dressing (miss to wear atleast one dressing) is invalid.", new string[] {
                        "integration",
                        "ignore"});
#line 85
this.ScenarioSetup(scenarioInfo);
#line 86
 testRunner.Given("the weather is \"COLD\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Dress"});
            table6.AddRow(new string[] {
                        "Pajamas_Off"});
            table6.AddRow(new string[] {
                        "PantsOn"});
            table6.AddRow(new string[] {
                        "SocksOn"});
            table6.AddRow(new string[] {
                        "ShirtOn"});
            table6.AddRow(new string[] {
                        "HeadwearOn"});
            table6.AddRow(new string[] {
                        "JacketOn"});
            table6.AddRow(new string[] {
                        "LeaveHouse"});
#line 87
 testRunner.When("I wear the following in the given order", ((string)(null)), table6, "When ");
#line 96
 testRunner.Then("pants I put on should be \"pants\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 97
  testRunner.And("should put on Socks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 98
  testRunner.And("shirt I put on should be \"t-shirt\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 99
  testRunner.And("headwear should be \"hat\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 100
  testRunner.And("should put on Jacket", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 101
  testRunner.But("the dressing should fail", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "But ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Dress without PajamasOff is invalid.", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Weather Dressing")]
        [Xunit.TraitAttribute("Description", "Dress without PajamasOff is invalid.")]
        [Xunit.TraitAttribute("Category", "integration")]
        public virtual void DressWithoutPajamasOffIsInvalid_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Dress without PajamasOff is invalid.", new string[] {
                        "integration",
                        "ignore"});
#line 105
this.ScenarioSetup(scenarioInfo);
#line 106
 testRunner.Given("the weather is \"HOT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Dress"});
            table7.AddRow(new string[] {
                        "PantsOn"});
            table7.AddRow(new string[] {
                        "ShirtOn"});
            table7.AddRow(new string[] {
                        "HeadwearOn"});
            table7.AddRow(new string[] {
                        "FootwearOn"});
            table7.AddRow(new string[] {
                        "LeaveHouse"});
#line 107
 testRunner.When("I wear the following in the given order", ((string)(null)), table7, "When ");
#line 114
 testRunner.Then("the dressing should fail", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                WeatherDressingFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                WeatherDressingFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
